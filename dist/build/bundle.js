(()=>{"use strict";var C;!function(C){C.SQUARE="SQUARE",C.CIRCLE="CIRCLE"}(C||(C={})),C.CIRCLE,Math.ceil(8/3)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,